#include <iostream>
#include <array>
#include "Riostream.h"
#include "TFile.h"
#include "TF1.h"
#include "TH1.h"
#include "TCanvas.h"
#include <fstream>
#include "TGraph.h"
#include "TGraphErrors.h"
#include <math.h>


//function for discriminating between experimental and simulated energy lists. Simulation needs more energies analyzed for use in summing corrections, but only want to compare with energies that are analyzed in experimental results. To change which ones are compared, add of remove indices as necessary. In this function, the "i" index refers to the simulated energies array Energy[i], so we are ignoring Energy[4], Energy[6], and so on.

//Credit to Lee Ward for this function idea 05/13/2021-DCS
bool is_exp_energy(int i){
  if(i == 4 || i == 6 || i == 7 || i == 9 || i == 10 || i == 12 || i == 13 || i == 14 || i == 15 || i == 16 || i == 17 || i == 19 || i == 21 || i == 22 || i == 25 || i == 26){
    return false;
  }
  else{
    return true;
  }
}

//these are the crystals that are directly in the beamline and not included in sim. For some reason it still includes them in the results files, so they need to be ignored to avoid dividing by zero
bool is_sim_crystal(int j){
  if(j == 0 || j == 1 || j == 2 || j == 3 || j == 16 || j == 17 || j == 18 || j == 19){
    return false;
  }
  else{
    return true;
  }
}


//main function

void analysis_comparison_test(){

  //expected energies = {42.8,86.5,105.3,123.1,247,591,723,873,996,1004,1274,1596}
  static const int numE = 12;
  static const int simnumE = 29;
  static const int numcrystals = 64;
  static const int simnumcrystals = 72;
  static const int numdets = 16;

  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------
  //----------Beginning of experimental analysis-------------------------------
  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------
  
  Double_t energy, chan, dchan, cts, dcts, eff, deff;
  Double_t dum1, dum2, dum3, dum4;
  ifstream infile;



  //declaring 2D vectors to store efficiency and efficiency error information

  Double_t Efficiency[12][64];
  Double_t Efficiency_Err[12][64];

  //setting initial values to zero since a few crystals are missing
  for(int i = 0; i < 12; i++){
    for(int j = 0; j < 64; j++){
      Efficiency[i][j] = 0;
      Efficiency_Err[i][j] = 0;
    }
  }


  //looping through results files and crystal numbers

  for(int i = 0; i < numcrystals; i++){

    infile.open(Form("/home/dcs411/e17011/Efficiency_e17011/total/Clover_%i_Results.txt",i));

    if(!infile.is_open()) {
      cout << "File " << Form("Clover_%i_Results.txt",i) << " could not be opened, moving on....\n" ;
    } else {
      // Skip first two lines of calibration pars
      infile.ignore(2000,'\n');
      infile.ignore(2000,'\n');
     
	// Reset
	energy = chan = dchan = cts = dcts = eff = deff = 0;

	// Read in data to create master array of efficiencies and efficiency errors

	while(!infile.eof()) {

	  //cout << energy << " " << chan << " "  << dchan << " " << cts << " " << dcts << " " << eff << " " << deff << endl;

	  infile >> energy >> chan >> dchan >> cts >> dcts >> eff >> deff;

	  if(energy == 42.8){
	    Efficiency[0][i] = eff;
	    Efficiency_Err[0][i] = deff;
	  }
	  if(energy == 86.5){
	    Efficiency[1][i] = eff;
	    Efficiency_Err[1][i] = deff;
	  }
	  if(energy == 105.3){
	    Efficiency[2][i] = eff;
	    Efficiency_Err[2][i] = deff;
	  }
	  if(energy == 123.1){
	    Efficiency[3][i] = eff;
	    Efficiency_Err[3][i] = deff;
	  }
	  if(energy == 247.7){
	    Efficiency[4][i] = eff;;
	    Efficiency_Err[4][i] = deff;
	  }
	  if(energy == 591.8){
	    Efficiency[5][i] = eff;
	    Efficiency_Err[5][i] = deff;
	  }
	  if(energy == 723.3){
	    Efficiency[6][i] = eff;
	    Efficiency_Err[6][i] = deff;
	  }
	  if(energy == 873.2){
	    Efficiency[7][i] = eff;
	    Efficiency_Err[7][i] = deff;
	  }
	  if(energy == 996.3){
	    Efficiency[8][i] = eff;
	    Efficiency_Err[8][i] = deff;
	  }
	  if(energy == 1004.7){
	    Efficiency[9][i] = eff;
	    Efficiency_Err[9][i] = deff;
	  }
	  if(energy == 1274.5){
	    Efficiency[10][i] = eff;
	    Efficiency_Err[10][i] = deff;
	  }
	  if(energy == 1596.4){
	    Efficiency[11][i] = eff;
	    Efficiency_Err[11][i] = deff;
	  }
	  if(infile.eof()){
	    infile.close();
	  }
	}
    }
  }  


  //defining crystal regions for experiment (simulation crystal numbers are different)
  vector<int> downcrystals = {48,49,50,51,52,53,54,55,56,57,58,60,61,62,63};
  vector<int> upcrystals = {0,1,2,3,4,6,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47};
  vector<int> abovecrystals = {4,6,24,25,26,27,28,29,30,31,32,33,34,35,52,53,54,55};
  vector<int> belowcrystals = {12,13,14,15,16,17,18,19,40,41,42,43,44,45,46,47,60,61,62,63};
  vector<int> rightcrystals = {0,1,2,3,16,17,18,19,20,21,22,23,24,25,26,27,48,49,50,51};
  vector<int> leftcrystals = {8,10,11,28,29,30,31,32,33,34,35,36,37,39,56,57,58};

  //initializing arrays for regions of interest
  double toteff[numE] = {};
  double totefferr[numE] = {};
  double downeff[numE] = {};
  double downefferr[numE] = {};
  double upeff[numE] = {};
  double upefferr[numE] = {};
  double righteff[numE] = {};
  double rightefferr[numE] = {};
  double lefteff[numE] = {};
  double leftefferr[numE] = {};
  double aboveeff[numE] = {};
  double aboveefferr[numE] = {};
  double beloweff[numE] = {};
  double belowefferr[numE] = {};
  //array of energies analyzed in the experimental results
  double energies[12] = {42.8,86.5,105.3,123.1,247.7,591.8,723.3,873.2,996.3,1004.7,1274.5,1596.4};
  double energieserr[12] = {};
  
  //looping through the crystals
  //this is probably unecessary since the summing corrections were added, but it might be convenient to have on hand if you want to see what the summing corrections did -DCS
  for(int i = 0; i < numcrystals; i++){
    //looping through energies
    for(int j = 0; j < numE; j++){
      //cout << "Efficiency[" << j << "][" << i << "]: " << Efficiency[j][i] << endl;
      //checking to see if the crystal is downstream
      if(std::find(downcrystals.begin(), downcrystals.end(), i) != downcrystals.end()) {
	//populating downstream efficiency and error vectors
	downeff[j] += Efficiency[j][i];
	downefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //checking to see if the crystal is upstream
      if(std::find(upcrystals.begin(), upcrystals.end(), i) != upcrystals.end()) {
	//populating upstream efficiency and error vectors
        upeff[j] += Efficiency[j][i];
        upefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //checking to see if the crystal is on the right
      if(std::find(rightcrystals.begin(), rightcrystals.end(), i) != rightcrystals.end()) {
	//populating right efficiency and error vectors
	righteff[j] += Efficiency[j][i];
	rightefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //checking to see if the crystal is on the left
      if(std::find(leftcrystals.begin(), leftcrystals.end(), i) != leftcrystals.end()) {
	//populating left efficiency and error vectors
	lefteff[j] += Efficiency[j][i];
	leftefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //checking to see if the crystal is above
      if(std::find(abovecrystals.begin(), abovecrystals.end(), i) != abovecrystals.end()) {
	//populating above efficiency and error vectors
	aboveeff[j] += Efficiency[j][i];
	aboveefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //checking to see if the crystal is below
      if(std::find(belowcrystals.begin(), belowcrystals.end(), i) != belowcrystals.end()) {
	//populating below efficiency and error vectors
	beloweff[j] += Efficiency[j][i];
	belowefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
      }
      //populating efficiency and error vectors for all the crystals
      toteff[j] += Efficiency[j][i];
      totefferr[j] += Efficiency_Err[j][i]*Efficiency_Err[j][i];
    }

  }



  //calculating errors
  for(int i = 0; i<numE; i++){
    totefferr[i] = sqrt(totefferr[i]);
    belowefferr[i] = sqrt(belowefferr[i]);
    aboveefferr[i] = sqrt(aboveefferr[i]);
    downefferr[i] = sqrt(downefferr[i]);
    upefferr[i] = sqrt(upefferr[i]);
    leftefferr[i] = sqrt(leftefferr[i]);
    rightefferr[i] = sqrt(rightefferr[i]);
  }

  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------
  //-------------end of experiment analysis------------------------------------
  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------




  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------
  //------------beginning of sim analysis--------------------------------------
  //---------------------------------------------------------------------------
  //---------------------------------------------------------------------------

  //declaring array of simulated energies
  int Energy[simnumE];  

  Energy[0] = 43;  //in keV
  Energy[1] = 87; //in keV
  Energy[2] = 105; //in keV
  Energy[3] = 123; //in keV
  Energy[4] = 176; //in keV. not in e17011 experimental results 
  Energy[5] = 247; //in keV
  Energy[6] = 428; //in keV. not in e17011 experimental results 
  Energy[7] = 444; //in keV. not in e17011 experimental results
  Energy[8] = 463; //in keV. not in e17011 experimental results 
  Energy[9] = 478; //in keV. not in e17011 experimental results
  Energy[10] = 582; //in keV. not in e17011 experimental results
  Energy[11] = 591; //in keV
  Energy[12] = 601; //in keV. not in e17011 experimental results
  Energy[13] = 612; //in keV. not in e17011 experimental results
  Energy[14] = 625; //in keV. not in e17011 experimental results
  Energy[15] = 636; //in keV. not in e17011 experimental results 
  Energy[16] = 677; //in keV. not in e17011 experimental results
  Energy[17] = 692; //in keV. not in e17011 experimental results
  Energy[18] = 723;  //in keV
  Energy[19] = 757; //in keV. not in e17011 experimental results
  Energy[20] = 873; //in keV
  Energy[21] = 893; //in keV. not in e17011 experimental results
  Energy[22] = 904; //in keV. not in e17011 experimental results
  Energy[23] = 996; //in keV
  Energy[24] = 1004; //in keV
  Energy[25] = 1119; //in keV. not in e17011 experimental results
  Energy[26] = 1246; //in keV. not in e17011 experimental results
  Energy[27] = 1274; //in keV
  Energy[28] = 1596; //in keV



  //Number of Gammas in Simulation

  //was originally 10000000
  double nGamma = 10000000;

  // Efficiencies [Energy][Det Number]
  double Peak_Efficiency[simnumE][numdets] = {};
  double Peak_Efficiency_Err[simnumE][numdets] = {};

  double Peak_Eff_cry_orig[simnumE][simnumcrystals] = {};
  double Peak_Eff_Err_cry_orig[simnumE][simnumcrystals] = {};
  
  double Total_Efficiency[simnumE][numdets] = {};
  double Total_Efficiency_Err[simnumE][numdets] = {};

  double Total_Eff_cry_orig[simnumE][simnumcrystals] = {};
  double Total_Eff_Err_cry_orig[simnumE][simnumcrystals] = {};

  //FIles
  TFile *f1t[simnumE];
  
  for(int i=0; i<simnumE; i++) {
    //change this file path to data drive once simulated root files are moved over there. -DCS 05/20/2021
    f1t[i] = new TFile(Form("/home/dcs411/e17011/Efficiency/sim_analysis/simrootfiles/%dkeVtest_0.root",Energy[i]));
  }

  //Fits & Histos
  TF1 *fClover[simnumE][numdets] = {};
  TH1D *hClover[simnumE][numdets];
  TH1D *hClover_crystal[simnumE][simnumcrystals];
  TF1 *fClover_crystal[simnumE][simnumcrystals] = {};


  for(int i=0; i<simnumE; i++) {
    for(int j=0; j<simnumcrystals; j++) {
	hClover_crystal[i][j] = (TH1D*) f1t[i]->Get(Form("hEnergyDepositClover_%d",j));
      
	if(Energy[i]<100) {
	  fClover_crystal[i][j] = new TF1(Form("fc_%dkev_%d",Energy[i],j),"gaus",0.90*Energy[i],1.10*Energy[i]);
	}
	else if(Energy[i]<200) {
	  fClover_crystal[i][j] = new TF1(Form("fc%dkev_%d",Energy[i],j),"gaus",0.95*Energy[i],1.05*Energy[i]);
	}
	else {
	  fClover_crystal[i][j] = new TF1(Form("fc%dkev_%d",Energy[i],j),"gaus",0.98*Energy[i],1.02*Energy[i]);
	}
    
      
    }
  }
  


  //output root file
  //move this to data drive whenever given permission DCS 05/20/2021
  TFile *fout = new TFile("/home/dcs411/e17011/Efficiency/sim_analysis/simrootfiles/test_0.root","RECREATE");



  for(int i=0; i<simnumE; i++) {
    for(int j=0; j<simnumcrystals; j++) {


      hClover_crystal[i][j]->GetXaxis()->SetRangeUser(0.9*Energy[i],1.10*Energy[i]);

    
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParameter(0,100);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParameter(1,Energy[i]);   
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      fClover_crystal[i][j]->SetParameter(2,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ+");
   
      double area = 2.506628*(fClover_crystal[i][j]->GetParameter(0))*(fClover_crystal[i][j]->GetParameter(2));
      double area_err = area*pow((pow((fClover_crystal[i][j]->GetParError(0)/fClover_crystal[i][j]->GetParameter(0)),2)+pow((fClover_crystal[i][j]->GetParError(2)/fClover_crystal[i][j]->GetParameter(2)),2)),0.5);
      double eff = 100.0*area/(1.0*nGamma);
      double eff_err = 100.0*area_err/(1.0*nGamma);

      double total_eff = 0;
      for(int k=2; k<Energy[i]*1.10; k++) {
	total_eff += hClover_crystal[i][j]->GetBinContent(k);
      }
      double total_eff_err = pow(total_eff,0.5)/(1.0*nGamma);
      total_eff = total_eff/(1.0*nGamma);
      //}
      

      //cout<<i<<"  "<<j<<"  "<<eff<<" +/- "<<eff_err<<"  "<<100*total_eff<<" +/- "<<100*total_eff_err<<endl;
      cout << i << "  " << j << "  " << area << "  " << total_eff*1.0*nGamma << endl;

      // Efficiencies [Energy][Det Number]

	Peak_Eff_cry_orig[i][j] = eff;
	Peak_Eff_Err_cry_orig[i][j] = eff_err;
	
	Total_Eff_cry_orig[i][j] = total_eff;
	Total_Eff_Err_cry_orig[i][j] = total_eff_err;
       
    }
  }

  //truncate arrays here. 


  double Peak_Eff_cry[simnumE][numcrystals] = {};
  double Peak_Eff_Err_cry[simnumE][numcrystals] = {};
  double Total_Eff_cry[simnumE][numcrystals] = {};
  double Total_Eff_Err_cry[simnumE][numcrystals] = {};



  //int counter1 = 0;
  for(int i = 0; i < simnumE; i++){
    int counter1 = 0;
    for(int j = 0; j < simnumcrystals; j++){
      if(is_sim_crystal(j)){
	Peak_Eff_cry[i][counter1] = Peak_Eff_cry_orig[i][j];
	Peak_Eff_Err_cry[i][counter1] = Peak_Eff_Err_cry_orig[i][j];
	Total_Eff_cry[i][counter1] = Total_Eff_cry_orig[i][j];
	Total_Eff_Err_cry[i][counter1] = Total_Eff_Err_cry[i][j];
	counter1++;
      }
    }
  }

  for(int i = 0; i < simnumE; i++){
    for(int j = 0; j < numcrystals; j++){
      if(is_sim_crystal(j)){
        cout << Peak_Eff_cry[i][j] << endl;
      }
    }
  }


  //writing simulated data to output text file
  //need to path this to data drive later
  ofstream data;
  data.open("Sim_Eff.txt");
  
  for(int j=0; j<numcrystals;j++){
    data<<"Crystal"<<j<<"\n";
    for(int i=0; i<numE; i++) {
      data<<Peak_Eff_cry_orig[i][j]<<"  "<< Peak_Eff_Err_cry_orig[i][j]<<"  "<<Total_Eff_cry_orig[i][j]<<"  "<<Total_Eff_Err_cry_orig[i][j]<<"\n";	  
    }
    data<<"\n";	
  }

  //master efficiency arrays are populated. now we can manipulate them

  Double_t sum_eff_Full[simnumE] = {};
  Double_t sum_eff_err_Full[simnumE]= {};
  Double_t sum_eff_crystal_Full[simnumE] = {};
  Double_t sum_eff_crystal_err_Full[simnumE] = {};
  Double_t err_temp1[simnumE] = {};
  Double_t err_temp2[simnumE] = {};

  //summing sim efficiencies for each energy and storing in array so we can plot later


  for(int j = 0; j < numcrystals; j++){
    for(int i = 0; i < simnumE; i++){
	sum_eff_crystal_Full[i] += Peak_Eff_cry_orig[i][j];
	err_temp2[i] += pow(Peak_Eff_Err_cry_orig[i][j],2);
    }
  }


  for(int i = 0; i < numE; i++){
    //seting 43keV error to 0 for now
    if(i<=1){
      sum_eff_crystal_err_Full[i] = 0;
    }
    else{
      sum_eff_crystal_err_Full[i] = err_temp2[i]*sqrt(err_temp2[i]);
    }
  }
  //cout << sum_eff_crystal_err[i] << endl;

  //declaring crystal number vectors for regions of interest in the simulation
  vector<int> simupcrystals = {8,9,10,11,16,17,18,19,32,33,34,35,36,37,38,39,4,5,6,7,48,49,50,51,28,29,30,31,52,53,54,55,16,17,18,19,56,57,58,59,40,41,42,43,60,61,62,63};
  vector<int> simdowncrystals = {0,1,2,3,24,25,26,27,28,29,30,31,48,49,50,51};
  vector<int> simleftcrystals = {0,1,2,3,4,5,6,7,8,9,10,11,48,49,50,51,60,61,62,63};
  vector<int> simrightcrystals = {12,13,14,15,16,17,18,19,20,21,22,23,52,53,54,55,56,57,58,59};
  vector<int> simabovecrystals = {24,25,26,27,28,29,30,31,32,33,34,35,48,49,50,51,52,53,54,55};
  vector<int> simbelowcrystals = {36,37,38,39,40,41,42,43,44,45,46,47,56,57,58,59,60,61,62,63};

  double simupeff_Full[simnumE] = {};
  double simupefferr_Full[simnumE] = {};
  double simdowneff_Full[simnumE] = {};
  double simdownefferr_Full[simnumE] = {};
  double simaboveeff_Full[simnumE] = {};
  double simaboveefferr_Full[simnumE] = {};
  double simbeloweff_Full[simnumE] = {};
  double simbelowefferr_Full[simnumE] = {};
  double simlefteff_Full[simnumE] = {};
  double simleftefferr_Full[simnumE] = {};
  double simrighteff_Full[simnumE] = {};
  double simrightefferr_Full[simnumE] = {};

  //populating region vectors
  //looping through the crystals
  for(int i = 0; i < numcrystals; i++){
    //looping through energies
    for(int j = 0; j < simnumE; j++){
      //checking to see if the crystal is downstream
      if(std::find(simdowncrystals.begin(), simdowncrystals.end(), i) != simdowncrystals.end()) {
	//populating downstream efficiency and error vectors
	simdowneff_Full[j] += Peak_Eff_cry_orig[j][i];
	simdownefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
      //checking to see if the crystal is upstream
      if(std::find(simupcrystals.begin(), simupcrystals.end(), i) != simupcrystals.end()) {
	//populating upstream efficiency and error vectors
	simupeff_Full[j] += Peak_Eff_cry_orig[j][i];
	simupefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
      //checking to see if the crystal is on the right
      if(std::find(simrightcrystals.begin(), simrightcrystals.end(), i) != simrightcrystals.end()) {
	//populating right efficiency and error vectors
	simrighteff_Full[j] += Peak_Eff_cry_orig[j][i];
	simrightefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
      //checking to see if the crystal is on the left
      if(std::find(simleftcrystals.begin(), simleftcrystals.end(), i) != simleftcrystals.end()) {
	//populating left efficiency and error vectors
	simlefteff_Full[j] += Peak_Eff_cry_orig[j][i];
	simleftefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
      //checking to see if the crystal is above
      if(std::find(simabovecrystals.begin(), simabovecrystals.end(), i) != simabovecrystals.end()) {
	//populating above efficiency and error vectors
	simaboveeff_Full[j] += Peak_Eff_cry_orig[j][i];
	simaboveefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
      //checking to see if the crystal is below
      if(std::find(simbelowcrystals.begin(), simbelowcrystals.end(), i) != simbelowcrystals.end()) {
	//populating below efficiency and error vectors
	simbeloweff_Full[j] += Peak_Eff_cry_orig[j][i];
	simbelowefferr_Full[j] += pow(Peak_Eff_Err_cry_orig[j][i],2);
      }
    }
   

  }

  //calculating errors
  //setting 43keV energy err to 0 right now because not enough statistics and throws off the graph
  for(int i = 0; i<simnumE; i++){
    if(i<=1){
      simbelowefferr_Full[i] = 0;
      simaboveefferr_Full[i] = 0;
      simdownefferr_Full[i] = 0;
      simupefferr_Full[i] = 0;
      simleftefferr_Full[i] = 0;
      simrightefferr_Full[i] = 0;
    }
    else{
      simbelowefferr_Full[i] = sqrt(simbelowefferr_Full[i]);
      simaboveefferr_Full[i] = sqrt(simaboveefferr_Full[i]);
      simdownefferr_Full[i] = sqrt(simdownefferr_Full[i]);
      simupefferr_Full[i] = sqrt(simupefferr_Full[i]);
      simleftefferr_Full[i] = sqrt(simleftefferr_Full[i]);
      simrightefferr_Full[i] = sqrt(simrightefferr_Full[i]);
    }
  }


  //need to remove energies that aren't included in experiment for comparison
  //can do that by removing the elements of the Full arrays associated with those energies we aren't interested in. 

  Double_t sum_eff_trunc[numE] = {};
  Double_t sum_eff_err_trunc[numE]= {};
  Double_t sum_eff_crystal_trunc[numE] = {};
  Double_t sum_eff_crystal_err_trunc[numE] = {};
  double simupeff_trunc[simnumE] = {};
  double simupefferr_trunc[simnumE] = {};
  double simdowneff_trunc[simnumE] = {};
  double simdownefferr_trunc[simnumE] = {};
  double simaboveeff_trunc[simnumE] = {};
  double simaboveefferr_trunc[simnumE] = {};
  double simbeloweff_trunc[simnumE] = {};
  double simbelowefferr_trunc[simnumE] = {};
  double simlefteff_trunc[simnumE] = {};
  double simleftefferr_trunc[simnumE] = {};
  double simrighteff_trunc[simnumE] = {};
  double simrightefferr_trunc[simnumE] = {};

  int counter = 0;
  

  //truncating efficiency arrays to include only energies we care about for comparison purposes. In sim there are 29 energies. We only want to compare with the 12 we have for experiment. The is_exp_energy function defined at the beginning of this code takes care of this
  for(int j = 0; j < simnumE; j++){
    if(is_exp_energy(j)){
      sum_eff_trunc[counter] = sum_eff_Full[j];
      sum_eff_err_trunc[counter] = sum_eff_err_Full[j];
      sum_eff_crystal_trunc[counter] = sum_eff_crystal_Full[j];
      sum_eff_crystal_err_trunc[counter] = sum_eff_crystal_err_Full[j];
      simupeff_trunc[counter] = simupeff_Full[j];
      simupefferr_trunc[counter] = simupefferr_Full[j];
      simdowneff_trunc[counter] = simdowneff_Full[j];
      simdownefferr_trunc[counter] = simdownefferr_Full[j];
      simaboveeff_trunc[counter] = simaboveeff_Full[j];
      simaboveefferr_trunc[counter] = simaboveefferr_Full[j];
      simbeloweff_trunc[counter] = simbeloweff_Full[j];
      simbelowefferr_trunc[counter] = simbelowefferr_Full[j];
      simlefteff_trunc[counter] = simlefteff_Full[j];
      simleftefferr_trunc[counter] = simleftefferr_Full[j];
      simrighteff_trunc[counter] = simrighteff_Full[j];
      simrightefferr_trunc[counter] = simrightefferr_Full[j];
      counter++;
      }
  }

 

  //--------------------------------------------------------------------------
  //--------------------------------------------------------------------------
  //----------end of sim analysis---------------------------------------------
  //--------------------------------------------------------------------------
  //--------------------------------------------------------------------------





    
}
