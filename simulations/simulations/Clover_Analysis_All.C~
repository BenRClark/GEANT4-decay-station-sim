#include "TFile.h"
#include "TF1.h"
#include "TH1.h"
#include "TCanvas.h"
#include <fstream>
#include "TGraph.h"
#include "TGraphErrors.h"

void Clover_Analysis_All() {

  static const int numdets = 18;
  static const int numE = 10;
  static const int numcrystals = 72;

  //Energies
  int Energy[numE];  

  Energy[0] = 25; //in keV
  Energy[1] = 50; //in keV
  Energy[2] = 100; //in keV
  Energy[3] = 200; //in keV
  Energy[4] = 500; //in keV
  Energy[5] = 1000; //in keV
  Energy[6] = 2000; //in keV
  Energy[7] = 3000; //in keV
  Energy[8] = 4000; //in keV
  Energy[9] = 5000; //in keV



  //Number of Gammas in Simulation
  double nGamma = 10000000;

  // Efficiencies [Energy][Det Number]
  double Peak_Efficiency[numE][numdets];
  double Peak_Efficiency_Err[numE][numdets];

  double Peak_Efficiency_crystal[numE][numcrystals];
  double Peak_Efficiency_Err_crystal[numE][numcrystals];
  
  double Total_Efficiency[numE][numdets];
  double Total_Efficiency_Err[numE][numdets];

  double Total_Efficiency_crystal[numE][numcrystals];
  double Total_Efficiency_Err_crystal[numE][numcrystals];

  //FIles
  TFile *f1t[numE];
  
  for(int i=0; i<numE; i++) {
    //f1t[i] = new TFile(Form("/data/e17011/simulations/analysis/e17011_Eff_%dkeV_4p8in_0.root",Energy[i]));
    //f1t[i] = new TFile(Form("/data/e17011/simulations/analysis/e17011_Eff_%dkeV_5p5in_0.root",Energy[i]));
    f1t[i] = new TFile(Form("/data/e17011/simulations/analysis/e17011_Eff_%dkeV_test_0.root",Energy[i]));
  }

  //Fits & Histos
  TF1 *fClover[numE][numdets];
  TH1D *hClover[numE][numdets];
  TH1D *hClover_crystal[numE][numcrystals];
  TF1 *fClover_crystal[numE][numcrystals];
  
  for(int i=0; i<numE; i++) {
    for(int j=0; j<numdets; j++) {
      hClover[i][j] = (TH1D*) f1t[i]->Get(Form("hEnergyDepositClover_addback_%d",j));
      
      if(Energy[i]<100) {
	fClover[i][j] = new TF1(Form("f%dkev_%d",Energy[i],j),"gaus",0.90*Energy[i],1.10*Energy[i]);
      }
      else if(Energy[i]<200) {
	fClover[i][j] = new TF1(Form("f%dkev_%d",Energy[i],j),"gaus",0.95*Energy[i],1.05*Energy[i]);
      }
      else {
	fClover[i][j] = new TF1(Form("f%dkev_%d",Energy[i],j),"gaus",0.98*Energy[i],1.02*Energy[i]);
      }
    }
  }

  for(int i=0; i<numE; i++) {
    for(int j=0; j<numcrystals; j++) {
      hClover_crystal[i][j] = (TH1D*) f1t[i]->Get(Form("hEnergyDepositClover_%d",j));
      
      if(Energy[i]<100) {
	fClover_crystal[i][j] = new TF1(Form("fc_%dkev_%d",Energy[i],j),"gaus",0.90*Energy[i],1.10*Energy[i]);
      }
      else if(Energy[i]<200) {
	fClover_crystal[i][j] = new TF1(Form("fc%dkev_%d",Energy[i],j),"gaus",0.95*Energy[i],1.05*Energy[i]);
      }
      else {
	fClover_crystal[i][j] = new TF1(Form("fc%dkev_%d",Energy[i],j),"gaus",0.98*Energy[i],1.02*Energy[i]);
      }
    }
  }
  
  
  //TCanvas
  TCanvas *c1t[numE];
  
  for(int i=0; i<numE; i++) {
    c1t[i] = new TCanvas(Form("c_%d_keV",Energy[i]),Form("c_%d_keV",Energy[i]),1024,768);
    c1t[i]->Divide(4,5);
  }

  //output root file
  TFile *fout = new TFile("/data/e17011/simulations/analysis/e17011_Eff_out.root","RECREATE");

  for(int i=0; i<numE; i++) {
    for(int j=0; j<numdets; j++) {

      c1t[i]->cd(j+1);
      hClover[i][j]->GetXaxis()->SetRangeUser(0.9*Energy[i],1.10*Energy[i]);
      hClover[i][j]->Draw();
    
      fClover[i][j]->SetParLimits(0,1,1000000);
      fClover[i][j]->SetParameter(0,100);
      fClover[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover[i][j]->SetParameter(1,Energy[i]);   
      fClover[i][j]->SetParLimits(2,0,5);
      fClover[i][j]->SetParameter(2,5);
      
      hClover[i][j]->Fit(fClover[i][j],"RQ");
      
      fClover[i][j]->SetParLimits(0,1,1000000);
      fClover[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover[i][j]->SetParLimits(2,0,5);
      
      hClover[i][j]->Fit(fClover[i][j],"RQ");
      
      fClover[i][j]->SetParLimits(0,1,1000000);
      fClover[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover[i][j]->SetParLimits(2,0,5);
      
      hClover[i][j]->Fit(fClover[i][j],"RQ");
      
      fClover[i][j]->SetParLimits(0,1,1000000);
      fClover[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover[i][j]->SetParLimits(2,0,5);
      
      hClover[i][j]->Fit(fClover[i][j],"RQ+");

      double area = 2.506628*(fClover[i][j]->GetParameter(0))*(fClover[i][j]->GetParameter(2));
      double area_err = area*pow((pow((fClover[i][j]->GetParError(0)/fClover[i][j]->GetParameter(0)),2)+pow((fClover[i][j]->GetParError(2)/fClover[i][j]->GetParameter(2)),2)),0.5);
      double eff = 100.0*area/(1.0*nGamma);
      double eff_err = 100.0*area_err/(1.0*nGamma);

      double total_eff = 0;
      for(int k=2; k<Energy[i]*1.10; k++) {
	total_eff += hClover[i][j]->GetBinContent(k);
      }
      double total_eff_err = pow(total_eff,0.5)/(1.0*nGamma);
      total_eff = total_eff/(1.0*nGamma);
      

      cout<<i<<"  "<<j<<"  "<<eff<<" +/- "<<eff_err<<"  "<<100*total_eff<<" +/- "<<100*total_eff_err<<endl;

      // Efficiencies [Energy][Det Number]
      if(j>=8 && (Energy[i]==42 || Energy[i] == 86 || Energy[i] ==105)) {
	cout<<"Special Condition"<<endl;
	Peak_Efficiency[i][j] = 0;
	Peak_Efficiency_Err[i][j] = 0;
	
	Total_Efficiency[i][j] = 0;
	Total_Efficiency_Err[i][j] = 0;
	
      }
      else {
	Peak_Efficiency[i][j] = eff;
	Peak_Efficiency_Err[i][j] = eff_err;
	
	Total_Efficiency[i][j] = total_eff;
	Total_Efficiency_Err[i][j] = total_eff_err;
	
      }
    }
  }

  for(int i=0; i<numE; i++) {
    for(int j=0; j<numcrystals; j++) {

      //c1t[i]->cd(j+1);
      hClover_crystal[i][j]->GetXaxis()->SetRangeUser(0.9*Energy[i],1.10*Energy[i]);
      //hClover_crystal[i][j]->Draw();
    
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParameter(0,100);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParameter(1,Energy[i]);   
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      fClover_crystal[i][j]->SetParameter(2,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ");
      
      fClover_crystal[i][j]->SetParLimits(0,1,1000000);
      fClover_crystal[i][j]->SetParLimits(1,0.98*Energy[i],1.02*Energy[i]);
      fClover_crystal[i][j]->SetParLimits(2,0,5);
      
      hClover_crystal[i][j]->Fit(fClover_crystal[i][j],"RQ+");

      double area = 2.506628*(fClover_crystal[i][j]->GetParameter(0))*(fClover_crystal[i][j]->GetParameter(2));
      double area_err = area*pow((pow((fClover_crystal[i][j]->GetParError(0)/fClover_crystal[i][j]->GetParameter(0)),2)+pow((fClover_crystal[i][j]->GetParError(2)/fClover_crystal[i][j]->GetParameter(2)),2)),0.5);
      double eff = 100.0*area/(1.0*nGamma);
      double eff_err = 100.0*area_err/(1.0*nGamma);

      double total_eff = 0;
      for(int k=2; k<Energy[i]*1.10; k++) {
	total_eff += hClover_crystal[i][j]->GetBinContent(k);
      }
      double total_eff_err = pow(total_eff,0.5)/(1.0*nGamma);
      total_eff = total_eff/(1.0*nGamma);
      

      cout<<i<<"  "<<j<<"  "<<eff<<" +/- "<<eff_err<<"  "<<100*total_eff<<" +/- "<<100*total_eff_err<<endl;

      // Efficiencies [Energy][Det Number]
      if(j>=8 && (Energy[i]==42 || Energy[i] == 86 || Energy[i] ==105)) {
	cout<<"Special Condition"<<endl;
	Peak_Efficiency_crystal[i][j] = 0;
	Peak_Efficiency_Err_crystal[i][j] = 0;
	
	Total_Efficiency_crystal[i][j] = 0;
	Total_Efficiency_Err_crystal[i][j] = 0;
	
      }
      else {
	Peak_Efficiency_crystal[i][j] = eff;
	Peak_Efficiency_Err_crystal[i][j] = eff_err;
	
	Total_Efficiency_crystal[i][j] = total_eff;
	Total_Efficiency_Err_crystal[i][j] = total_eff_err;
	
      }
    }
  }
  
  ofstream data;
  data.open("Sim_Eff.txt");
  
  for(int j=0; j<numdets; j++) {
    data<<"Clover"<<j<<"\n";
    for(int i=0; i<numE; i++) {
      data<<Peak_Efficiency[i][j]<<"  "<< Peak_Efficiency_Err[i][j]<<"  "<<Total_Efficiency[i][j]<<"  "<<Total_Efficiency_Err[i][j]<<"\n";	  
    }
    data<<"\n";	
  }
  for(int j=0; j<numcrystals;j++){
    data<<"Crystal"<<j<<"\n";
    for(int i=0; i<numE; i++) {
      data<<Peak_Efficiency_crystal[i][j]<<"  "<< Peak_Efficiency_Err_crystal[i][j]<<"  "<<Total_Efficiency_crystal[i][j]<<"  "<<Total_Efficiency_Err_crystal[i][j]<<"\n";	  
    }
    data<<"\n";	
  }

  //make graph of efficiency curve
  TCanvas *c1graph1 = new TCanvas();
  TCanvas *c1graph2 = new TCanvas();
  Double_t sum_eff[numE];
  Double_t sum_eff_err[numE];
  Double_t sum_eff_crystal[numE];
  Double_t sum_eff_crystal_err[numE];
  Double_t err_temp1[numE];
  Double_t err_temp2[numE];
  for(int j = 0; j < numdets; j++){
    for(int i = 0; i < numE; i++){
      sum_eff[i] += Peak_Efficiency[i][j];
      err_temp1[i] += pow(Peak_Efficiency_Err[i][j],2);
    }
  }
  for(int j = 0; j < numcrystals; j++){
    for(int i = 0; i < numE; i++){
      sum_eff_crystal[i] += Peak_Efficiency_crystal[i][j];
      err_temp2[i] += pow(Peak_Efficiency_Err_crystal[i][j],2);
    }
  }
  for(int i = 0; i < numE; i++){
    sum_eff_err[i] = err_temp1[i]*sqrt(err_temp1[i]);
    sum_eff_crystal_err[i] = err_temp2[i]*sqrt(err_temp2[i]);
  }
  Double_t ex[numE] = {0,0,0,0,0,0,0,0,0,0};
  Double_t Edouble[numE];
  for(int i = 0; i < numE; i++){
    Edouble[i] = (Double_t)Energy[i];
  }
  TGraphErrors *gre1 = new TGraphErrors(numE,Edouble,sum_eff,ex,sum_eff_err);
  TGraphErrors *gre2 = new TGraphErrors(numE,Edouble,sum_eff_crystal,ex,sum_eff_crystal_err);
  c1graph1->cd();
  gre1->SetTitle("Clover Array Add-back Efficiency");
  gre1->GetXaxis()->SetTitle("Energy (keV)");
  gre1->GetYaxis()->SetTitle("Efficiency (percent)");
  gre1->SetMarkerColor(4);
  gre1->SetMarkerStyle(21);
  gre1->Draw("ALP");
  c1graph2->cd();
  gre2->SetTitle("Clover Array Single Crystal Efficiency");
  gre2->GetXaxis()->SetTitle("Energy (keV)");
  gre2->GetYaxis()->SetTitle("Efficiency (percent)");
  gre2->SetMarkerColor(4);
  gre2->SetMarkerStyle(21);
  gre2->Draw("ALP");

  gre1->Write();
  gre2->Write();
  
  cout<<"Done!"<<endl;
  
  cout<<"Writing output root file" << endl;
  fout->Write();
  
}





  //     for(int k=5; k<Energy[i]+50; k++) {	
  // 	total_eff+= SeGA[i][j]->GetBinContent(k);
  //     }

  //   // Missing detector 6 (5 counting from 0 in data)
  //   if(i==5 || i==12 || (Energy==42 && i== 2)) {
  //     cout<<"Special Condition"<<endl;
  //   }
  //   else {
  //     cout<<"SeGA :"<<i<<" Area: "<<area<<"  Eff: "<<eff<<endl;
  //     nGammaPhotoPeak+= area;
  //     totaleff+= eff; 
  //     total_eff = total_eff/(0.01*nGamma);		    
  //     cout<<"SeGA :"<<i<<" Total_eff: "<<total_eff<<"  %"<<endl;
  //     total_array_eff += total_eff;
  //   }
    
  //   if(i==7) {
  //     cout<<"Downstream Ring: "<<totaleff<<endl;
  //     totaleff = 0;
  //     cout<<"Total Downstream Ring: "<<total_array_eff<<" %"<<endl;	
  //     total_arrray_eff = 0;	
  //   }

  //   total_eff = 0;
  // }

  // cout<<"Upstream Ring: "<<totaleff<<endl;
  // cout<<"Total Upstream Ring: "<<total_array_eff<<endl;
  // cout<<"There were "<<nGammaPhotoPeak<<" Gammas detected in the photopeak"<<endl;
  // cout<<"Efficiency: "<<nGammaPhotoPeak*100.0/nGamma<< "%"<<endl;

//}
